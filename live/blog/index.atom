<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/</id>
    <title>mojolicious.io</title>
    <updated>2017-12-10T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/index.atom" rel="self" />
    <link href="https://mojolicious.io/blog/" rel="alternate" />
    <generator version="0.087">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/</id>
        <title>Day 10: Give the Customer What They Want</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Writing an API can be as easy as taking the results of some database query and presenting it to the user.
A more advanced can often present the data in one of multiple formats.
The user can then specify which format they want.</p>

<p>JSON is currently the most popular format for new APIs.
XML is another common one and was certainly king before JSON hit the scene.
An API might choose to make an HTML format of the data available, whether in some representation of the data or to render documentation about the API itself.
Of course there are many others.</p>

<p>Mojolicious believes in <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-negotiation">Content Negotiation</a>, as it is called, and supports it throughout the stack.
Mojolicious makes it easy and convenient for users to pick a format they would like.
Similarly it makes rendering the different formats easy on the site author, as you would expect.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                </p>

        ]]></content>
        <updated>2017-12-10T00:00:00Z</updated>
        <category term="advent" />
        <category term="rendering" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/</id>
        <title>Day 9: The Best Way to Test</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Ok so it is a bit of a click-bait headline.
But that doesn&#39;t mean I don&#39;t believe it.</p>

<p><a href="http://mojolicious.org/perldoc/Test/Mojo">Test::Mojo</a> is a test framework for websites and related technologies.
While its true that there are many such tools, this one gets its power comes from combining so many of the tools that Mojolicious provides.
A full non-blocking web server, including websockets, an <a href="http://mojolicious.org/perldoc/Mojo/IOLoop">event loop</a>, an <a href="http://mojolicious.org/perldoc/Mojo/DOM">XML/HTML DOM parser</a>, <a href="http://mojolicious.org/perldoc/Mojo/JSON">JSON parser and emitter</a>, and more all come together to make incredibly detailed testing simple.
Further, with the recent additions in support of <a href="http://mojolicious.org/perldoc/Mojo/Base#with_roles">roles</a> (which will be discussed in a future post), Test::Mojo is becoming an extensible testing platform.</p>

<p>In this article, I&#39;ll give a quick overview of how to use Test::Mojo and some of its methods.
Rest assured you&#39;ll see more of it as the series continues.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/testing/">testing</a>
                </p>

        ]]></content>
        <updated>2017-12-09T00:00:00Z</updated>
        <category term="advent" />
        <category term="testing" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/</id>
        <title>Day 8: Mocking a REST API</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>One of my applications is a pure-JavaScript UI for a JSON API. This UI
is an entirely different project that communicates with a public API
using an OpenAPI specification.</p>

<p>Our public API is huge and complex: To set up the public API, I need
a database, sample data, and three other private API servers that
perform individual tasks as directed by the public API. Worse, I would
need to set up a lot of different test scenarios with different kinds of
data.</p>

<p>It would be a lot easier to set up a mock public API that I could use to
test my UI, and it turns out that Mojolicious makes this very easy.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/mocking/">mocking</a>
                    <a href="https://mojolicious.io/blog/tag/api/">api</a>
                </p>

        ]]></content>
        <updated>2017-12-08T00:00:00Z</updated>
        <category term="advent" />
        <category term="mocking" />
        <category term="api" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/</id>
        <title>Day 7: Using Template Variants For a Beta Landing Page</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://cpantesters.org">CPAN Testers</a> is a pretty big project with a long,
storied history. At its heart is a data warehouse holding all the test reports
made by people installing CPAN modules. Around that exists an ecosystem of
tools and visualizations that use this data to provide useful insight into the
status of CPAN distributions.</p>

<p>For the <a href="http://github.com/cpan-testers/cpantesters-web">CPAN Testers webapp
project</a>, I needed a way to
show off some pre-release tools with some context about what they are and how
they might be made ready for release. I needed a &quot;beta&quot; website with a front
page that introduced the beta projects. But, I also needed the same
<a href="http://mojolicious.org">Mojolicious</a> application to serve (in the future) as a
production website. The front page of the production website would be
completely different from the front page of the beta testing website.</p>

<p>To achieve this, I used <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Template-variants">Mojolicious&#39;s template variants
feature</a>.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                    <a href="https://mojolicious.io/blog/tag/template/">template</a>
                </p>

        ]]></content>
        <updated>2017-12-07T00:00:00Z</updated>
        <category term="advent" />
        <category term="rendering" />
        <category term="template" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/</id>
        <title>Day 6: Adding Your Own Commands</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Everyone has written those one-off administration or check scripts.
There are probably a few cluttering your project root or bin directory right now.
Those have a problem beyond just the clutter: duplication.</p>

<p>Programmers hate duplication because of skew.
If code gets improved in one place, it is unlikely to be improved in all places, unless there is only the one.
So that script you wrote a while back, the one with the database connection you hand-rolled, is that still correct?</p>

<p>In the <a href="https://mojolicious.io/blog/2017/12/05/day-5-your-apps-built-in-commands">previous article in this series</a> I talked about the built-in commands available to your application.
The final command was <a href="http://mojolicious.org/perldoc/Mojolicious/Command/eval"><code>eval</code></a>.
I mentioned that when combined with predefined behaviors, the command could be great for administrative tasks.
That&#39;s true, but you need to know what to eval in order to do so.</p>

<p>To formalize that process, we can go one step further: defining our own commands.
By doing this your application&#39;s administative behaviors can take arguemnts and provide optional switches as well as give usage messages.
In this way these administative commands decouple themselves from knowledge of the application&#39;s internals and become useful to a broader set of users.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/command/">command</a>
                    <a href="https://mojolicious.io/blog/tag/example/">example</a>
                </p>

        ]]></content>
        <updated>2017-12-06T00:00:00Z</updated>
        <category term="advent" />
        <category term="command" />
        <category term="example" />
    </entry>
</feed>

