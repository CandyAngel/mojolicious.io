<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mojolicious.io</title>
        <link>https://mojolicious.io/blog/tag/advent/</link>
        <atom:link href="https://mojolicious.io/blog/tag/advent.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of mojolicious.io</description>
        <generator>Statocles 0.088</generator>
        <item>
            <title>Day 16: The Secret Life of Sessions</title>
            <link>https://mojolicious.io/blog/2017/12/16/day-16-the-secret-life-of-sessions/</link>
            <guid>https://mojolicious.io/blog/2017/12/16/day-16-the-secret-life-of-sessions/</guid>
            <description><![CDATA[
                <p>As you all know, HTTP is a stateless protocol.
In Mojolicious applications the session is used to maintain state between requests.
These sessions are managed by the application&#39;s <a href="http://mojolicious.org/perldoc/Mojolicious/#sessions">session manager</a>.</p>

<p>During each request, the <a href="http://mojolicious.org/perldoc/Mojolicious/Controller#session">session</a> is just another hash reference attached to the controller, in some ways like the <a href="https://mojolicious.io/blog/2017/12/02/day-2-the-stash">stash</a>, except this one persists between requests.
Mojolicious does this by encoding the structure, first as JSON then Base64.
It then signs the resulting string using HMAC-SHA1 and the application&#39;s <a href="http://mojolicious.org/perldoc/Mojolicious#secrets">secret</a> to prevent tampering and stores it as a cookie on the response to the client.</p>

<p>On subsequent requests, the client sends the cookie along with the request (as cookies do).
Mojolicious then checks if the document and signature validate against the secret, if so the cookie is decoded and made available again via the session method.</p>

<p>Two important things to note.
First, though the data is safe from tampering, it isn&#39;t encrypted; a savvy user can decode the cookie and see the stored data, so don&#39;t put anything in it that shouldn&#39;t be seen.
Second, this is only useful if the secret is strong and safe.
If not, the client could forge a cookie that appeared to come from your application, possibly with catastrophic results!
So while Mojolicious makes it easy, a little care can go a long way toward keeping your session data safe and trusted.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/16/day-16-the-secret-life-of-sessions/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/session/">session</a>
                    </p>

            ]]></description>
            <pubDate>
                Sat, 16 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 15: Start a New Yancy App</title>
            <link>https://mojolicious.io/blog/2017/12/15/day-15-start-a-new-yancy-app/</link>
            <guid>https://mojolicious.io/blog/2017/12/15/day-15-start-a-new-yancy-app/</guid>
            <description><![CDATA[
                <p><a href="http://metacpan.org/pod/Yancy">Yancy</a> is a new content management
plugin for the <a href="http://mojolicious.org">Mojolicious web framework</a>.
Yancy allows you to easily administrate your site’s content just by
describing it using <a href="http://json-schema.org">JSON Schema</a>. Yancy
supports <a href="http://metacpan.org/pod/Yancy::Backend">multiple backends</a>, so
your site&#39;s content can be in
<a href="http://metacpan.org/pod/Yancy::Backend::Pg">Postgres</a>,
<a href="http://metacpan.org/pod/Yancy::Backend::Mysql">MySQL</a>, and
<a href="http://metacpan.org/pod/Yancy::Backend::Dbic">DBIx::Class</a>.</p>

<p>For an demonstration application, let’s create a simple blog using
<a href="http://mojolicious.org/perldoc/Mojolicious/Lite">Mojolicious::Lite</a>.
First we need to create a database schema for our blog posts. Let&#39;s use
<a href="http://metacpan.org/pod/Mojo::Pg">Mojo::Pg</a> and its <a href="http://metacpan.org/pod/Mojo::Pg::Migrations">migrations
feature</a> to create a table
called &quot;blog&quot; with fields for an ID, a title, a date, some markdown, and
some HTML.</p>

<pre><code class="hljs"><span class="hljs-comment"># myapp.pl</span><span class="hljs-comment">
</span><span class="hljs-keyword">use</span> <span class="hljs-function">Mojolicious::Lite</span>;
<span class="hljs-keyword">use</span> <span class="hljs-function">Mojo::Pg</span>;

<span class="hljs-keyword">my</span> <span class="hljs-type">$pg</span> = <span class="hljs-function">Mojo::Pg</span>-&gt;new( &#39;<span class="hljs-string">postgres://localhost/blog</span>&#39; );
<span class="hljs-type">$pg</span>-&gt;<span class="hljs-type">migrations</span>-&gt;<span class="hljs-type">from_data</span>-&gt;<span class="hljs-type">migrate</span>;

<span class="hljs-keyword">__DATA__</span>
@@ migrations
-- 1 up
CREATE TABLE blog (
    id SERIAL PRIMARY KEY,
    title VARCHAR NOT NULL,
    created TIMESTAMP NOT NULL DEFAULT NOW(),
    markdown TEXT NOT NULL,
    html TEXT NOT NULL
);
-- 1 down
DROP TABLE blog;
</code></pre>

<p>Next we add <a href="http://metacpan.org/pod/Mojolicious::Plugin::Yancy">the Yancy
plugin</a> and tell it
about our backend and data. Yancy deals with data as a set of
collections which contain items. For a relational database like
Postgres, a collection is a table, and an item is a row in that table.</p>

<p>Yancy uses a JSON schema to describe each item in a collection.
For our <code>blog</code> collection, we have five fields:</p>

<ol>
<li><code>id</code> which is an auto-generated integer and should be read-only</li>
<li><code>title</code> which is a free-form string which is required</li>
<li><code>created</code> which is an ISO8601 date/time string, auto-generated</li>
<li><code>markdown</code> which is a required Markdown-formatted string</li>
<li><code>html</code>, a string which holds the rendered Markdown and is also required</li>
</ol>

<p>Here&#39;s our configured Yancy <code>blog</code> collection:</p>

<pre><code class="hljs">plugin Yancy =&gt; {
    backend =&gt; &#39;<span class="hljs-string">pg://localhost/blog</span>&#39;,
    collections =&gt; {
        blog =&gt; {
            required =&gt; [ &#39;<span class="hljs-string">title</span>&#39;, &#39;<span class="hljs-string">markdown</span>&#39;, &#39;<span class="hljs-string">html</span>&#39; ],
            properties =&gt; {
                id =&gt; {
                    type =&gt; &#39;<span class="hljs-string">integer</span>&#39;,
                    readOnly =&gt; <span class="hljs-number">1</span>,
                },
                title =&gt; {
                    type =&gt; &#39;<span class="hljs-string">string</span>&#39;,
                },
                created =&gt; {
                    type =&gt; &#39;<span class="hljs-string">string</span>&#39;,
                    <span class="hljs-function">format</span> =&gt; &#39;<span class="hljs-string">date-time</span>&#39;,
                    readOnly =&gt; <span class="hljs-number">1</span>,
                },
                markdown =&gt; {
                    type =&gt; &#39;<span class="hljs-string">string</span>&#39;,
                    <span class="hljs-function">format</span> =&gt; &#39;<span class="hljs-string">markdown</span>&#39;,
                    &#39;<span class="hljs-string">x-html-field</span>&#39; =&gt; &#39;<span class="hljs-string">html</span>&#39;,
                },
                html =&gt; {
                    type =&gt; &#39;<span class="hljs-string">string</span>&#39;,
                },
            },
        },
    },
};
</code></pre>

<p>Yancy will build us a rich form for our collection from the field types
we tell it. Some fields, like the <code>markdown</code> field, take additional
configuration: <code>x-html-field</code> tells the Markdown field where to save the
rendered HTML. There&#39;s plenty of customization options in <a href="http://metacpan.org/pod/Yancy#CONFIGURATION">the Yancy
configuration documentation</a>.</p>

<p>Now we can start up our app and go to <a href="http://127.0.0.1:3000/yancy">http://127.0.0.1:3000/yancy</a> to
manage our site&#39;s content:</p>

<pre><code>$ perl myapp.pl daemon
Server available at http://127.0.0.1:3000
</code></pre>

<p><img alt="Screen shot of adding a new blog item with Yancy" src="https://mojolicious.io/blog/2017/12/15/day-15-start-a-new-yancy-app/adding-item.png">
<img alt="Screen shot of Yancy after the new blog item is added" src="https://mojolicious.io/blog/2017/12/15/day-15-start-a-new-yancy-app/item-added.png"></p>

<p>Finally, we need some way to display our blog posts.  <a href="http://metacpan.org/pod/Mojolicious::Plugin::Yancy#HELPERS">Yancy provides
helpers to access our
data</a>. Let&#39;s
use the <code>list</code> helper to display a list of blog posts. This helper takes
a collection name and gives us a list of items in that collection. It
also allows us to search for items and order them to our liking. Since
we&#39;ve got a blog, we will order by the creation date, descending.</p>

<pre><code class="hljs">get &#39;<span class="hljs-string">/</span>&#39; =&gt; <span class="hljs-keyword">sub </span>{
    <span class="hljs-keyword">my</span> ( <span class="hljs-type">$c</span> ) = <span class="hljs-type">@_</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-type">$c</span>-&gt;<span class="hljs-type">render</span>(
        &#39;<span class="hljs-string">index</span>&#39;,
        posts =&gt; [ <span class="hljs-type">$c</span>-&gt;<span class="hljs-type">yancy</span>-&gt;<span class="hljs-type">list</span>(
            &#39;<span class="hljs-string">blog</span>&#39;, {}, { order_by =&gt; { -desc =&gt; &#39;<span class="hljs-string">created</span>&#39; } },
        ) ],
    );
};
</code></pre>

<p>Now we just need an HTML template to go with our route! Here, I use the standard
<a href="http://getbootstrap.com/docs/4.0/getting-started/introduction/#starter-template">Bootstrap 4 starter template</a>
and add this short loop to render our blog posts:</p>

<pre><code>&lt;main role=&quot;main&quot; class=&quot;container&quot;&gt;
% for my $post ( @{ stash &#39;posts&#39; } ) {
    &lt;%== $post-&gt;{html} %&gt;
% }
&lt;/main&gt;
</code></pre>

<p><a href="https://mojolicious.io/blog/2017/12/15/day-15-start-a-new-yancy-app/04-template.pl">Now we have our completed application</a> and we can test
to see our blog post:</p>

<pre><code>$ perl myapp.pl daemon
Server available at http://127.0.0.1:3000
</code></pre>

<p><img alt="The rendered blog post with our template" src="https://mojolicious.io/blog/2017/12/15/day-15-start-a-new-yancy-app/blog-post.png"></p>

<p>Yancy provides a rapid way to get started building a Mojolicious
application (above Mojolicious’s already rapid development). Yancy
provides a basic level of content management so site developers can
focus on what makes their site unique.</p>


                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/app/">app</a>
                    </p>

            ]]></description>
            <pubDate>
                Fri, 15 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 14: You Promised To Call!</title>
            <link>https://mojolicious.io/blog/2017/12/14/day-14-you-promised-to-call/</link>
            <guid>https://mojolicious.io/blog/2017/12/14/day-14-you-promised-to-call/</guid>
            <description><![CDATA[
                <p>A new feature of <a href="http://mojolicious.org/">Mojolicious</a>, as of <a href="https://metacpan.org/release/SRI/Mojolicious-7.49">7.49</a>, is the implementation of the <a href="https://promisesaplus.com/implementations#in-other-languages">Promises/A+ specification</a>. In this posting, we&#39;re going to use promises to implement non-blocking, parallel fetching of a number of web pages.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/14/day-14-you-promised-to-call/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/non-blocking/">non-blocking</a>
                        <a href="https://mojolicious.io/blog/tag/promises/">promises</a>
                    </p>

            ]]></description>
            <pubDate>
                Thu, 14 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 13: More About Roles</title>
            <link>https://mojolicious.io/blog/2017/12/13/day-13-more-about-roles/</link>
            <guid>https://mojolicious.io/blog/2017/12/13/day-13-more-about-roles/</guid>
            <description><![CDATA[
                <p>Before we get ahead of ourselves, what are roles?
Briefly stated, roles enable composing functionality (usually methods) into a class without without implying a change of inheritence.
Said another way, roles let you specify what a class does without changing what it is.
For a better description, check out Toby Inkster&#39;s article <a href="http://radar.oreilly.com/2014/01/horizontal-reuse-an-alternative-to-inheritance.html">Horizontal Reuse: An Alternative to Inheritance</a>.</p>

<p>An important utility of roles is that you can easily use more than one role at the same time in the same consuming class.
With inheritance, especially of third-party functionality, you have to choose one set of extensions to utilize.
This is because the author of the subclass establishes the inheritance.
In roles, the user determines which roles to compose into the base class.</p>

<p><a href="https://mojolicious.io/blog/2017/12/12/day-12-more-than-a-base-class">Yesterday</a> I ended the discussion of <a href="http://mojolicious.org/perldoc/Mojo/Base">Mojo::Base</a> before discussing the roles support.
Added in several installments between Mojolicious versions <a href="https://metacpan.org/release/SRI/Mojolicious-7.40">7.40</a> and <a href="https://metacpan.org/release/SRI/Mojolicious-7.55">7.55</a>, this role support is one of the most recently added features in the ecosystem (along with <a href="http://mojolicious.org/perldoc/Mojo/Promise">promises</a>, which will be covered in <a href="https://mojolicious.io/blog/2017/12/14/day-14-you-promised-to-call">an upcoming article</a>).
The role handling comes from <a href="https://metacpan.org/pod/Role::Tiny">Role::Tiny</a> which is an optional dependency in Mojolicious, but is required in order to use the functionality that I will describe.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/13/day-13-more-about-roles/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/roles/">roles</a>
                    </p>

            ]]></description>
            <pubDate>
                Wed, 13 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 12: More Than a Base Class</title>
            <link>https://mojolicious.io/blog/2017/12/12/day-12-more-than-a-base-class/</link>
            <guid>https://mojolicious.io/blog/2017/12/12/day-12-more-than-a-base-class/</guid>
            <description><![CDATA[
                <p>Through this series, you&#39;ve seen the module <a href="http://mojolicious.org/perldoc/Mojo/Base">Mojo::Base</a> referenced several times, though briefly and mostly in passing.
It shouldn&#39;t be taken lightly however, it packs a lot of punch in one import statement!
Nearly every file in the Mojolicious distribution uses it, either directly or indirectly.
So what is it?</p>

<p>First it imports several handy pragma that make your code safer and some features that are useful.
Second, it can be a base class to the current package, or establish a parent class, or even define a role.
Let&#39;s see how it does it.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/12/day-12-more-than-a-base-class/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/fluent/">fluent</a>
                        <a href="https://mojolicious.io/blog/tag/roles/">roles</a>
                    </p>

            ]]></description>
            <pubDate>
                Tue, 12 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

