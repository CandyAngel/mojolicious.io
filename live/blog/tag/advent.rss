<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mojolicious.io</title>
        <link>https://mojolicious.io/blog/tag/advent/</link>
        <atom:link href="https://mojolicious.io/blog/tag/advent.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of mojolicious.io</description>
        <generator>Statocles 0.087</generator>
        <item>
            <title>Day 12: More Than a Base Class</title>
            <link>https://mojolicious.io/blog/2017/12/12/day-12-more-than-a-base-class/</link>
            <guid>https://mojolicious.io/blog/2017/12/12/day-12-more-than-a-base-class/</guid>
            <description><![CDATA[
                <p>Through this series, you&#39;ve seen the module <a href="http://mojolicious.org/perldoc/Mojo/Base">Mojo::Base</a> referenced several times, though briefly and mostly in passing.
It shouldn&#39;t be taken lightly however, it packs a lot of punch in one import statement!
Nearly every file in the Mojolicious distribution uses it, either directly or indirectly.
So what is it?</p>

<p>First it imports several handy pragma that make your code safer and some features that are useful.
Second, it can be a base class to the current package, or establish a parent class, or even define a role.
Let&#39;s see how it does it.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/12/day-12-more-than-a-base-class/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/fluent/">fluent</a>
                        <a href="https://mojolicious.io/blog/tag/roles/">roles</a>
                    </p>

            ]]></description>
            <pubDate>
                Tue, 12 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 11: UserAgent Content Generators</title>
            <link>https://mojolicious.io/blog/2017/12/11/day-11-useragent-content-generators/</link>
            <guid>https://mojolicious.io/blog/2017/12/11/day-11-useragent-content-generators/</guid>
            <description><![CDATA[
                <p>We have already seen <a href="http://mojolicious.org/perldoc/Mojo/UserAgent">Mojo::UserAgent</a> used to make HTTP requests in this series.
In fact we&#39;ve already seen how you can use <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook#USER-AGENT">Content Generators</a> to build requests <a href="https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test#making-requests">in tests</a>.
But we didn&#39;t look at how they work or how you can add new ones.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/11/day-11-useragent-content-generators/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/useragent/">useragent</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 11 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 10: Give the Customer What They Want</title>
            <link>https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/</link>
            <guid>https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/</guid>
            <description><![CDATA[
                <p>Writing an API can be as easy as taking the results of some database query and presenting it to the user.
A more advanced one can often present the data in one of multiple formats.
The user can then specify which format they want.</p>

<p>JSON is currently the most popular format for new APIs.
XML is another common one and was certainly king before JSON hit the scene.
An API might choose to make an HTML format of the data available, whether in some representation of the data or to render documentation about the API itself.
Of course there are many others.</p>

<p>Mojolicious believes in <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-negotiation">Content Negotiation</a>, as it is called, and supports it throughout the stack.
Mojolicious makes it easy and convenient for users to pick a format they would like.
Similarly it makes rendering the different formats easy on the site author, as you would expect.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                    </p>

            ]]></description>
            <pubDate>
                Sun, 10 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 9: The Best Way to Test</title>
            <link>https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/</link>
            <guid>https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/</guid>
            <description><![CDATA[
                <p>Ok so it is a bit of a click-bait headline.
But that doesn&#39;t mean I don&#39;t believe it.</p>

<p><a href="http://mojolicious.org/perldoc/Test/Mojo">Test::Mojo</a> is a test framework for websites and related technologies.
While its true that there are many such tools, this one gets its power comes from combining so many of the tools that Mojolicious provides.
A full non-blocking web server, including websockets, an <a href="http://mojolicious.org/perldoc/Mojo/IOLoop">event loop</a>, an <a href="http://mojolicious.org/perldoc/Mojo/DOM">XML/HTML DOM parser</a>, <a href="http://mojolicious.org/perldoc/Mojo/JSON">JSON parser and emitter</a>, and more all come together to make incredibly detailed testing simple.
Further, with the recent additions in support of <a href="http://mojolicious.org/perldoc/Mojo/Base#with_roles">roles</a> (which will be discussed in a future post), Test::Mojo is becoming an extensible testing platform.</p>

<p>In this article, I&#39;ll give a quick overview of how to use Test::Mojo and some of its methods.
Rest assured you&#39;ll see more of it as the series continues.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/testing/">testing</a>
                    </p>

            ]]></description>
            <pubDate>
                Sat, 09 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 8: Mocking a REST API</title>
            <link>https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/</link>
            <guid>https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/</guid>
            <description><![CDATA[
                <p>One of my applications is a pure-JavaScript UI for a JSON API. This UI
is an entirely different project that communicates with a public API
using an OpenAPI specification.</p>

<p>Our public API is huge and complex: To set up the public API, I need
a database, sample data, and three other private API servers that
perform individual tasks as directed by the public API. Worse, I would
need to set up a lot of different test scenarios with different kinds of
data.</p>

<p>It would be a lot easier to set up a mock public API that I could use to
test my UI, and it turns out that Mojolicious makes this very easy.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/mocking/">mocking</a>
                        <a href="https://mojolicious.io/blog/tag/api/">api</a>
                    </p>

            ]]></description>
            <pubDate>
                Fri, 08 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

