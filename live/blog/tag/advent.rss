<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mojolicious.io</title>
        <link>https://mojolicious.io/blog/tag/advent/</link>
        <atom:link href="https://mojolicious.io/blog/tag/advent.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of mojolicious.io</description>
        <generator>Statocles 0.087</generator>
        <item>
            <title>Day 9: The Best Way to Test</title>
            <link>https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/</link>
            <guid>https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/</guid>
            <description><![CDATA[
                <p>Ok so it is a bit of a click-bait headline.
But that doesn&#39;t mean I don&#39;t believe it.</p>

<p><a href="http://mojolicious.org/perldoc/Test/Mojo">Test::Mojo</a> is a test framework for websites and related technologies.
While its true that there are many such tools, this one gets its power comes from combining so many of the tools that Mojolicious provides.
A full non-blocking web server, including websockets, an <a href="http://mojolicious.org/perldoc/Mojo/IOLoop">event loop</a>, an <a href="http://mojolicious.org/perldoc/Mojo/DOM">XML/HTML DOM parser</a>, <a href="http://mojolicious.org/perldoc/Mojo/JSON">JSON parser and emitter</a>, and more all come together to make incredibly detailed testing simple.
Further, with the recent additions in support of <a href="http://mojolicious.org/perldoc/Mojo/Base#with_roles">roles</a> (which will be discussed in a future post), Test::Mojo is becoming an extensible testing platform.</p>

<p>In this article, I&#39;ll give a quick overview of how to use Test::Mojo and some of its methods.
Rest assured you&#39;ll see more of it as the series continues.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/testing/">testing</a>
                    </p>

            ]]></description>
            <pubDate>
                Sat, 09 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 8: Mocking a REST API</title>
            <link>https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/</link>
            <guid>https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/</guid>
            <description><![CDATA[
                <p>One of my applications is a pure-JavaScript UI for a JSON API. This UI
is an entirely different project that communicates with a public API
using an OpenAPI specification.</p>

<p>Our public API is huge and complex: To set up the public API, I need
a database, sample data, and three other private API servers that
perform individual tasks as directed by the public API. Worse, I would
need to set up a lot of different test scenarios with different kinds of
data.</p>

<p>It would be a lot easier to set up a mock public API that I could use to
test my UI, and it turns out that Mojolicious makes this very easy.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/mocking/">mocking</a>
                        <a href="https://mojolicious.io/blog/tag/api/">api</a>
                    </p>

            ]]></description>
            <pubDate>
                Fri, 08 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 7: Using Template Variants For a Beta Landing Page</title>
            <link>https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/</link>
            <guid>https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/</guid>
            <description><![CDATA[
                <p><a href="http://cpantesters.org">CPAN Testers</a> is a pretty big project with a long,
storied history. At its heart is a data warehouse holding all the test reports
made by people installing CPAN modules. Around that exists an ecosystem of
tools and visualizations that use this data to provide useful insight into the
status of CPAN distributions.</p>

<p>For the <a href="http://github.com/cpan-testers/cpantesters-web">CPAN Testers webapp
project</a>, I needed a way to
show off some pre-release tools with some context about what they are and how
they might be made ready for release. I needed a &quot;beta&quot; website with a front
page that introduced the beta projects. But, I also needed the same
<a href="http://mojolicious.org">Mojolicious</a> application to serve (in the future) as a
production website. The front page of the production website would be
completely different from the front page of the beta testing website.</p>

<p>To achieve this, I used <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Template-variants">Mojolicious&#39;s template variants
feature</a>.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                        <a href="https://mojolicious.io/blog/tag/template/">template</a>
                    </p>

            ]]></description>
            <pubDate>
                Thu, 07 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 6: Adding Your Own Commands</title>
            <link>https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/</link>
            <guid>https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/</guid>
            <description><![CDATA[
                <p>Everyone has written those one-off administration or check scripts.
There are probably a few cluttering your project root or bin directory right now.
Those have a problem beyond just the clutter: duplication.</p>

<p>Programmers hate duplication because of skew.
If code gets improved in one place, it is unlikely to be improved in all places, unless there is only the one.
So that script you wrote a while back, the one with the database connection you hand-rolled, is that still correct?</p>

<p>In the <a href="https://mojolicious.io/blog/2017/12/05/day-5-your-apps-built-in-commands">previous article in this series</a> I talked about the built-in commands available to your application.
The final command was <a href="http://mojolicious.org/perldoc/Mojolicious/Command/eval"><code>eval</code></a>.
I mentioned that when combined with predefined behaviors, the command could be great for administrative tasks.
That&#39;s true, but you need to know what to eval in order to do so.</p>

<p>To formalize that process, we can go one step further: defining our own commands.
By doing this your application&#39;s administative behaviors can take arguemnts and provide optional switches as well as give usage messages.
In this way these administative commands decouple themselves from knowledge of the application&#39;s internals and become useful to a broader set of users.</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/command/">command</a>
                        <a href="https://mojolicious.io/blog/tag/example/">example</a>
                    </p>

            ]]></description>
            <pubDate>
                Wed, 06 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 5: Your App&#39;s Built-In Commands</title>
            <link>https://mojolicious.io/blog/2017/12/05/day-5-your-apps-built-in-commands/</link>
            <guid>https://mojolicious.io/blog/2017/12/05/day-5-your-apps-built-in-commands/</guid>
            <description><![CDATA[
                <p>I mentioned at the outset of this series that Mojolicious applications are more than just web servers.
I then showed how you can start a web server using the <a href="http://mojolicious.org/perldoc/Mojolicious/Command/daemon"><code>daemon</code></a> or <a href="http://mojolicious.org/perldoc/Mojolicious/Command/prefork"><code>prefork</code></a> commands.
In the previous post, I mentioned an <a href="http://mojolicious.org/perldoc/Mojolicious/Command/inflate"><code>inflate</code></a> command that can help you with growing your app from Lite to Full.</p>

<p>But there are other commands, built right in to your app, that can help you be more productive right away!</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/05/day-5-your-apps-built-in-commands/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/command/">command</a>
                        <a href="https://mojolicious.io/blog/tag/debugging/">debugging</a>
                        <a href="https://mojolicious.io/blog/tag/administration/">administration</a>
                    </p>

            ]]></description>
            <pubDate>
                Tue, 05 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

